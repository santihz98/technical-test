AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create test for technical test bank"

Parameters:
  UserName:
    Type: String
    Default: "sanagude"
    Description: "The user name"
  ApiGatewayId:
    Type: String
    Default: "q9vz1ywkg8"
    Description: "ID of the existing API Gateway"
  ApiGatewayRootResourceId:
    Type: String
    Default: "3rrikwl7j2"
    Description: "Root Resource ID of the existing API Gateway"
  SageMakerModelS3Bucket:
    Type: String
    Default: "bank-model-artifact-tech-test"
    Description: "S3 bucket containing the SageMaker model"
  SageMakerModelS3Key:
    Type: String
    Default: "qa-model/model.tar.gz"
    Description: "S3 key for the SageMaker model artifact"
  DockerImage:
    Type: String
    Default: "763104351884.dkr.ecr.us-east-1.amazonaws.com/huggingface-pytorch-inference:2.1.0-transformers4.37.0-cpu-py310-ubuntu22.04"
    Description: "Docker image for SageMaker model deployment"

Resources:
  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${UserName}-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "sagemaker:InvokeEndpoint"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: "*"

  # IAM Role for SageMaker Execution
  SageMakerExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${UserName}-sagemaker-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "sagemaker.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SageMakerPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "logs:*"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"

  # SageMaker Model
  SageMakerModel:
    Type: "AWS::SageMaker::Model"
    Properties:
      ModelName: !Sub tech-test-${UserName}-model
      PrimaryContainer:
        Image: !Ref DockerImage
        ModelDataUrl: !Sub s3://${SageMakerModelS3Bucket}/${SageMakerModelS3Key}
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn

  # SageMaker Endpoint Configuration
  EndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      ProductionVariants:
        - VariantName: "AllTraffic"
          ModelName: !GetAtt SageMakerModel.ModelName
          ServerlessConfig:
            MaxConcurrency: 20
            MemorySizeInMB: 5120

  #SageMaker Endpoint
  SageMakerEndpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointName: !Sub ${UserName}-endpoint
      EndpointConfigName: !GetAtt EndpointConfig.EndpointConfigName

  # Lambda Function
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${UserName}-lambda
      Handler: "index.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json

          def lambda_handler(event, context):
              sagemaker_runtime = boto3.client('runtime.sagemaker')
              endpoint_name = '${UserName}-endpoint'

              input_payload = json.dumps({
                  'question': event['question'],
                  'context': event['context']
              })

              response = sagemaker_runtime.invoke_endpoint(
                  EndpointName=endpoint_name,
                  ContentType='application/json',
                  Body=input_payload
              )

              result = json.loads(response['Body'].read().decode())
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'answer': result['answer'],
                      'score': result['score'],
                      'start': result['start'],
                      'end': result['end']
                  })
              }
      Runtime: "python3.8"
      MemorySize: 128
      Timeout: 30

  # API Gateway Resource
  ApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: "questions"
      RestApiId: !Ref ApiGatewayId

  # API Gateway Method
  ApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayId
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LambdaFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/POST/questions

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for sending questions"
    Value: !Sub https://${ApiGatewayId}.execute-api.${AWS::Region}.amazonaws.com/prod/questions
