AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create test for technical test bank"

Parameters:
  UserName:
    Type: String
    Default: "sanagude"
    Description: "The user name"
  ApiGatewayId:
    Type: String
    Default: "q9vz1ywkg8"
    Description: "ID of the existing API Gateway"
  ApiGatewayRootResourceId:
    Type: String
    Default: "3rrikwl7j2"
    Description: "Root Resource ID of the existing API Gateway"
  SageMakerModelS3Bucket:
    Type: String
    Default: "bank-model-artifact-tech-test"
    Description: "S3 bucket containing the SageMaker model"
  SageMakerModelS3Key:
    Type: String
    Default: "qa-model/model.tar.gz"
    Description: "S3 key for the SageMaker model artifact"
  DockerImage:
    Type: String
    Default: "763104351884.dkr.ecr.us-east-1.amazonaws.com/huggingface-pytorch-inference:2.1.0-transformers4.37.0-cpu-py310-ubuntu22.04"
    Description: "Docker image for SageMaker model deployment"
  LambdaS3Key:
    Type: String
    Default: "lambda_function.zip"
    Description: "The S3 key for the Lambda code"

Resources:
  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${UserName}-lambda-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "LambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "sagemaker:InvokeEndpoint"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: "*"

  # IAM Role for SageMaker Execution
  SageMakerExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${UserName}-sagemaker-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "sagemaker.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "SageMakerPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                  - "logs:*"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"

  # IAM Role for S3 Access
  S3AccessRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${UserName}-s3-access-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:user/${UserName}
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub arn:aws:s3:::tech-test-sanagude-s3
                  - !Sub arn:aws:s3:::tech-test-sanagude-s3/*

  LambdaS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub tech-test-${UserName}-s3

  # SageMaker Model
  SageMakerModel:
    Type: "AWS::SageMaker::Model"
    Properties:
      ModelName: !Sub tech-test-${UserName}-model
      PrimaryContainer:
        Image: !Ref DockerImage
        ModelDataUrl: !Sub s3://${SageMakerModelS3Bucket}/${SageMakerModelS3Key}
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn

  # SageMaker Endpoint Configuration
  EndpointConfig:
    Type: "AWS::SageMaker::EndpointConfig"
    Properties:
      EndpointConfigName: !Sub tech-test-${UserName}-config
      ProductionVariants:
        - VariantName: "AllTraffic"
          ModelName: !GetAtt SageMakerModel.ModelName
          ServerlessConfig:
            MaxConcurrency: 20
            MemorySizeInMB: 5120

  #SageMaker Endpoint
  SageMakerEndpoint:
    Type: "AWS::SageMaker::Endpoint"
    Properties:
      EndpointName: !Sub tech-test-${UserName}-endpoint
      EndpointConfigName: !GetAtt EndpointConfig.EndpointConfigName

  # Lambda Function
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub tech-test-${UserName}-lambda
      Handler: "lambda_function.lambda_handler"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub tech-test-${UserName}-s3
        S3Key: !Ref LambdaS3Key
      Runtime: "python3.12"
      MemorySize: 128
      Timeout: 30

  LambdaInvokePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub tech-test-${UserName}-lambda-use-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - lambda:*
            Resource: !GetAtt LambdaFunction.Arn
      Users:
        - !Ref UserName

  # API Gateway Resource
  ApiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !Ref ApiGatewayRootResourceId
      PathPart: "questions"
      RestApiId: !Ref ApiGatewayId

  # API Gateway Method
  ApiGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayId
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGatewayId
      StageName: !Sub tech-test-${UserName}
    DependsOn: ApiGatewayMethod

  # API Gateway Permissions for User
  ApiGatewayUserPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub tech-test-${UserName}-apigateway-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "apigateway:PUT"
              - "apigateway:POST"
              - "apigateway:PATCH"
              - "apigateway:DELETE"
              - "apigateway:GET"
            Resource: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${ApiGatewayId}/*
      Users:
        - !Ref UserName

  # Lambda Permission for API Gateway
  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LambdaFunction
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayId}/*/POST/questions

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for sending questions"
    Value: !Sub https://${ApiGatewayId}.execute-api.${AWS::Region}.amazonaws.com/tech-test-sanagude/questions
  SageMakerEndpointName:
    Description: "SageMaker endpoint name"
    Value: !Ref SageMakerEndpoint
  SageMakerEndpointConfigName:
    Description: "SageMaker endpoint configuration name"
    Value: !Ref EndpointConfig
  LambdaFunctionName:
    Description: "Lambda function name"
    Value: !Ref LambdaFunction
  LambdaS3BucketName:
    Description: "S3 bucket name for Lambda code"
    Value: !Ref LambdaS3Bucket
